{
  "hash": "bd11d658c1dd3dab5dbf0bbd088ed21a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Distribution\"\nformat:\n  revealjs:\n    width: 1200\n    sc-sb-title: true\n    footer: <https://m201.inqs.info/lectures/9>\n    df-print: paged\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    code-fold: true\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n  - reveal-auto-agenda\n\neditor: source\n---\n\n\n\n# Sampling Distribution\n\n## Sampling Distribution\n\nSampling Distribution is the idea that the statistics that you generate (slopes and intercepts) have their own data generation process.\n\n::: fragment\nIn other words, the numerical values you obtain from the `lm` and `glm` function can be different if we got a different data set.\n:::\n\n::: fragment\nSome values will be more common than others. Because of this, they have their own data generating process, like the outcome of interest has it's own data generating process.\n:::\n\n## Sampling Distributions\n\n- Distribution of a statistic over repeated samples\n\n- Different Samples yield different statistics\n\n::: notes\nIf we took many samples, the statistics (like means) would vary. Their distribution helps us quantify uncertainty.\n:::\n\n## Standard Error\n\nThe Standard Error (SE) is the standard deviation of a statistic itself.\n\n::: fragment\nSE tells us how much a statistic varies from sample to sample. Smaller SE = more precision.\n:::\n\n\n\n## Modelling the Data\n\n$$\nY_i = \\beta_0 + \\beta_1 X_i + \\varepsilon_i\n$$ \n\n- $Y_i$: Outcome data \n- $X_i$: Predictor data \n- $\\beta_0, \\beta_1$: parameters \n- $\\varepsilon_i$: error term\n\n## Error Term\n\n$$\n\\varepsilon_i \\sim DGP\n$$\n\n::: notes\n-   The error terms forces the outcome variable to be different from the mathematical model.\n-   The numbers being generated are random and cannot be predicted.\n:::\n\n## Randomness Effect\n\nThe randomness effect is a sampling phenomenom where you will get different samples everytime you sample a population.\n\n::: fragment\n\nGetting different samples means you will get different statistics.\n\n:::\n\n\n::: fragment\n\nThese statistics will have a distribution on their own.\n\n::: \n\n## Randomness Effect 1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Randomness Effect 2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Randomness Effect 3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Randomness Effect 4\n\n\n::: {.cell ecode-fold='true'}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Randomness Effect 5\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n# Simulating Unicorns\n\n## Simulating Unicorns\n\nTo better understand the variation in statistics, let's simulate a data set of unicorn characteristics to visualize and understand the variation.\n\n::: fragment\nWe will simulate a data set using the `unicorns` function and only need to specify how many unicorns you want to simulate.\n:::\n\n## Simulating Unicorn Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nunicorns(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Unicorn_ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Gender\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Color\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Unicorn\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Horn\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Horn_Length\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horn_Strength\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Health_Score\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Personality_Score\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Elusiveness_Score\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Gentleness_Score\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Nature_Score\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"9\",\"3\":\"Male\",\"4\":\"Gray\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"4.917467\",\"8\":\"25.61502\",\"9\":\"114.2489\",\"10\":\"1\",\"11\":\"0.12412335\",\"12\":\"10994.89\",\"13\":\"37.64313\",\"14\":\"32.026593\",\"15\":\"946.8244\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"Female\",\"4\":\"Gray\",\"5\":\"Ember\",\"6\":\"Aquamarine\",\"7\":\"4.872660\",\"8\":\"25.56191\",\"9\":\"134.8969\",\"10\":\"8\",\"11\":\"0.19103349\",\"12\":\"10802.35\",\"13\":\"32.92747\",\"14\":\"9.676860\",\"15\":\"922.3718\"},{\"1\":\"3\",\"2\":\"7\",\"3\":\"Non-binary\",\"4\":\"Silver\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"4.526313\",\"8\":\"27.17619\",\"9\":\"162.4634\",\"10\":\"3\",\"11\":\"1.06109229\",\"12\":\"10935.50\",\"13\":\"32.72086\",\"14\":\"4.570154\",\"15\":\"938.8300\"},{\"1\":\"4\",\"2\":\"10\",\"3\":\"Agender\",\"4\":\"Silver\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"4.907977\",\"8\":\"31.65705\",\"9\":\"160.4643\",\"10\":\"7\",\"11\":\"0.12717722\",\"12\":\"11024.02\",\"13\":\"32.64872\",\"14\":\"44.725743\",\"15\":\"949.8650\"},{\"1\":\"5\",\"2\":\"3\",\"3\":\"Male\",\"4\":\"White\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"5.051479\",\"8\":\"26.70648\",\"9\":\"112.5079\",\"10\":\"9\",\"11\":\"2.88373949\",\"12\":\"10797.30\",\"13\":\"31.47534\",\"14\":\"27.825938\",\"15\":\"922.1845\"},{\"1\":\"6\",\"2\":\"19\",\"3\":\"Non-binary\",\"4\":\"Brown\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"5.456771\",\"8\":\"23.15413\",\"9\":\"125.3413\",\"10\":\"2\",\"11\":\"0.42876214\",\"12\":\"11234.37\",\"13\":\"36.85237\",\"14\":\"1.205518\",\"15\":\"976.7630\"},{\"1\":\"7\",\"2\":\"11\",\"3\":\"Female\",\"4\":\"Silver\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"5.014252\",\"8\":\"25.62151\",\"9\":\"169.8754\",\"10\":\"9\",\"11\":\"0.01325106\",\"12\":\"11028.38\",\"13\":\"38.54887\",\"14\":\"44.766282\",\"15\":\"950.4521\"},{\"1\":\"8\",\"2\":\"2\",\"3\":\"Non-binary\",\"4\":\"Black\",\"5\":\"Ember\",\"6\":\"Aquamarine\",\"7\":\"5.394079\",\"8\":\"27.48306\",\"9\":\"133.9402\",\"10\":\"3\",\"11\":\"0.84987789\",\"12\":\"10737.53\",\"13\":\"32.62174\",\"14\":\"41.926287\",\"15\":\"914.2954\"},{\"1\":\"9\",\"2\":\"13\",\"3\":\"Non-binary\",\"4\":\"Pink\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"4.915648\",\"8\":\"28.30818\",\"9\":\"108.2149\",\"10\":\"3\",\"11\":\"1.60219265\",\"12\":\"11095.84\",\"13\":\"34.43309\",\"14\":\"3.956001\",\"15\":\"959.4239\"},{\"1\":\"10\",\"2\":\"6\",\"3\":\"Genderfluid\",\"4\":\"Brown\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"5.054301\",\"8\":\"27.02308\",\"9\":\"105.5397\",\"10\":\"9\",\"11\":\"0.33301085\",\"12\":\"10846.23\",\"13\":\"34.09599\",\"14\":\"36.942936\",\"15\":\"928.0600\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Unicorn Data Variables\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnames(unicorns(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"Unicorn_ID\"        \"Age\"               \"Gender\"           \n#>  [4] \"Color\"             \"Type_of_Unicorn\"   \"Type_of_Horn\"     \n#>  [7] \"Horn_Length\"       \"Horn_Strength\"     \"Weight\"           \n#> [10] \"Health_Score\"      \"Personality_Score\" \"Magical_Score\"    \n#> [13] \"Elusiveness_Score\" \"Gentleness_Score\"  \"Nature_Score\"\n```\n\n\n:::\n:::\n\n\nWe will only look at `Magical_Score` and `Nature_Score`.\n\n## Magical and Nature Score\n\n$$\nMagical =  3423 + 8 \\times Nature + \\varepsilon\n$$ \n\n$$\n\\varepsilon \\sim N(0, 3.24)\n$$\n\n## Simulating $N(0, 3.24)$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnorm(1, 0, sqrt(3.24))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2.783439\n```\n\n\n:::\n:::\n\n\n## Collecting\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nunicorns(10) |> select(Nature_Score, Magical_Score)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Nature_Score\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"962.8400\",\"2\":\"11121.30\"},{\"1\":\"928.4828\",\"2\":\"10852.40\"},{\"1\":\"950.3134\",\"2\":\"11024.49\"},{\"1\":\"962.8244\",\"2\":\"11127.37\"},{\"1\":\"934.6235\",\"2\":\"10899.29\"},{\"1\":\"947.7010\",\"2\":\"11004.31\"},{\"1\":\"965.6675\",\"2\":\"11149.66\"},{\"1\":\"940.3517\",\"2\":\"10948.02\"},{\"1\":\"957.8176\",\"2\":\"11087.45\"},{\"1\":\"964.5125\",\"2\":\"11137.36\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## DGP of Magical Score 1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## DGP of Magical Score 2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Estimating $\\beta_1$ via `lm`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu1 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u1)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3426.703         7.996\n```\n\n\n:::\n:::\n\n\n## Collecting a new sample\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu2 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u2)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3424.378         7.999\n```\n\n\n:::\n:::\n\n\n## Collecting a new sample\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu3 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u3)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3420.472         8.003\n```\n\n\n:::\n:::\n\n\n## Collecting a new sample\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu4 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u4)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3418.168         8.005\n```\n\n\n:::\n:::\n\n\n## Replicating Processes\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nreplicate(N, CODE)\n```\n:::\n\n\n\n- `N`: number of times to repeat a process \n- `CODE`: what is to repeated\n\n\n## Extracting $\\hat \\beta$ Coefficeints\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nb(MODEL, INDEX)\n```\n:::\n\n\n\n- `MODEL`: a model that can be used to extract components\n- `INDEX`: which component do you want to use\n    - `0`: Intercept\n    - `1`: first slope\n    - `2`: second slope\n    - `...`\n\n\n\n## Collecting 1000 Samples\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbetas <- replicate(1000,\n                   b(lm(Magical_Score ~ Nature_Score, unicorns(500)), 1))\n\nbetas\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    [1] 8.007157 8.000893 7.997428 8.002032 8.006475 7.997808 8.009278 7.999383\n#>    [9] 7.994799 7.998910 8.000014 8.005436 8.003205 8.002113 8.002078 8.001465\n#>   [17] 8.005400 7.998807 7.999349 7.992019 8.003311 8.004452 7.999371 8.000214\n#>   [25] 7.996444 8.003030 8.001367 8.007760 7.996444 7.996424 7.998324 7.993596\n#>   [33] 7.998605 8.003810 8.004357 7.994673 8.001840 8.001671 8.001392 8.000938\n#>   [41] 8.007295 8.000634 7.998769 8.003540 8.005684 7.997416 8.004455 8.000701\n#>   [49] 7.997367 8.005112 8.003047 7.998301 8.000767 8.000637 8.002095 8.000591\n#>   [57] 8.000882 8.007863 8.002743 7.994048 7.997993 8.001038 7.998764 8.002715\n#>   [65] 8.003204 7.997874 8.000957 8.002170 7.995798 8.002192 7.996791 7.998606\n#>   [73] 8.000925 7.995119 8.002805 7.994498 8.001793 8.000459 7.993545 8.003861\n#>   [81] 7.997673 8.007175 8.004126 7.997087 7.994296 7.996284 7.997921 8.002033\n#>   [89] 7.997215 7.998189 8.002331 7.998374 8.003384 8.003466 7.988857 8.000955\n#>   [97] 7.995245 7.990949 7.987330 7.997547 8.003502 7.995073 7.998772 8.000097\n#>  [105] 7.997231 7.995742 8.000758 8.004379 7.995308 8.009353 8.004723 7.999933\n#>  [113] 8.000809 7.998110 8.000521 8.008127 8.003772 8.002685 7.998874 7.994170\n#>  [121] 7.998039 7.999542 8.000897 8.001763 7.996540 8.002548 8.004987 7.996222\n#>  [129] 7.996409 8.001415 8.000708 7.994694 8.000062 7.997558 7.995333 8.006276\n#>  [137] 7.996415 8.009450 8.002011 7.993894 8.002159 7.996550 8.003671 7.994510\n#>  [145] 8.005938 8.005977 8.003889 7.992288 8.001126 7.999601 7.999281 8.001717\n#>  [153] 8.001512 7.995367 7.996223 8.002857 7.998722 8.005567 8.000513 7.998476\n#>  [161] 7.998848 8.004069 8.003414 8.000737 7.996157 8.001224 8.001096 7.995714\n#>  [169] 7.996635 8.003061 7.997705 8.002829 8.001144 7.995944 7.999575 8.001460\n#>  [177] 7.997554 8.001726 7.999432 7.998610 8.000918 7.999288 7.999616 8.001458\n#>  [185] 8.001286 7.997967 8.003255 7.996920 7.998033 8.001640 8.009501 7.997518\n#>  [193] 8.000085 7.996320 7.999009 7.999585 7.999021 8.003036 8.007783 8.002502\n#>  [201] 7.996117 8.001580 8.004988 7.996797 8.006530 8.003339 7.999313 7.998124\n#>  [209] 7.997335 7.986829 7.999979 8.005665 7.999605 8.003416 8.001724 8.001978\n#>  [217] 7.997708 8.003028 7.994243 8.001613 8.000397 8.004384 7.999374 7.998120\n#>  [225] 7.999248 8.001233 7.998964 8.004700 7.994548 7.995490 7.996604 8.001019\n#>  [233] 8.007980 8.007466 7.998412 7.999664 7.997271 7.995990 7.998684 7.993632\n#>  [241] 7.996220 7.995744 8.001354 8.000217 7.997949 8.006433 7.998086 8.002145\n#>  [249] 7.996321 7.991940 8.002400 7.993538 8.000090 8.006466 8.005844 7.999852\n#>  [257] 8.000377 8.003177 8.004665 7.999653 8.002249 7.995759 7.992712 8.000545\n#>  [265] 8.002237 8.002838 7.999018 8.002182 7.993159 7.998297 8.000026 8.002465\n#>  [273] 7.995035 8.002222 8.010105 8.001074 7.994533 7.996307 8.005209 7.997153\n#>  [281] 8.004056 8.003352 7.999976 8.006599 8.000464 8.001684 8.000454 7.997909\n#>  [289] 7.995816 7.997526 7.999540 8.006267 8.003919 8.002163 7.997781 8.006072\n#>  [297] 7.999513 7.989359 8.005207 8.001397 7.995066 7.998620 8.004102 8.006809\n#>  [305] 8.000246 7.996782 7.999178 8.003912 8.005934 7.996919 8.001759 8.005084\n#>  [313] 7.995775 8.003299 8.003491 7.997967 7.994648 7.996728 8.008980 8.005566\n#>  [321] 7.999472 7.998603 8.006901 7.997064 8.000794 7.991614 8.010384 7.995325\n#>  [329] 7.999631 7.992012 7.994522 7.996734 7.998329 8.001328 8.000605 8.003593\n#>  [337] 7.999209 7.994109 7.996790 8.008417 7.997851 8.000052 8.000531 8.005224\n#>  [345] 7.994153 8.003396 8.005064 7.998554 8.005691 7.994958 7.994582 7.992384\n#>  [353] 7.998789 8.001063 7.999739 7.999502 8.004037 7.998356 7.998093 8.003675\n#>  [361] 8.000415 8.004857 8.001246 7.996249 7.998782 7.998589 7.999854 7.999446\n#>  [369] 7.999593 7.998291 7.997650 8.003730 7.999746 7.993873 8.001724 8.000077\n#>  [377] 7.997544 8.003975 7.999398 7.999005 7.999752 8.008342 8.004498 8.003244\n#>  [385] 7.996111 7.995089 7.996175 7.995050 8.003923 7.993664 7.998801 8.002301\n#>  [393] 8.004470 7.996473 7.993279 7.995420 7.991298 7.996399 8.002089 7.999562\n#>  [401] 8.004626 7.993520 7.996114 8.004011 7.994217 7.999270 8.000385 7.998063\n#>  [409] 7.996934 8.001733 8.005274 7.994497 7.992047 7.996141 8.002374 7.998892\n#>  [417] 8.000075 8.002661 7.994454 7.997234 7.987611 7.997778 8.005022 8.005565\n#>  [425] 7.999945 8.001758 7.998919 8.005706 8.002969 7.997688 8.000801 7.998838\n#>  [433] 8.000350 8.001658 7.997997 8.000203 7.997544 8.001642 7.997921 8.006985\n#>  [441] 8.002984 7.996637 7.997034 7.998328 7.996369 7.994843 7.994218 8.003123\n#>  [449] 7.997003 7.996755 7.995493 8.002938 8.003391 7.997958 7.998064 7.995574\n#>  [457] 7.994267 7.999223 7.999444 8.007351 8.005172 8.002520 8.006390 7.996563\n#>  [465] 8.004432 7.993632 7.999546 8.006040 8.003365 8.001317 7.998183 7.999147\n#>  [473] 8.001648 7.996587 8.000242 7.999023 8.005859 8.010412 7.996437 7.999062\n#>  [481] 7.997838 8.000600 7.997618 7.994112 7.999831 7.991177 7.994996 8.000851\n#>  [489] 7.996349 8.002300 7.994563 8.003916 7.991029 7.999520 8.002975 7.999119\n#>  [497] 7.994844 7.996307 8.004754 7.999829 8.002047 8.003139 7.999028 8.000300\n#>  [505] 8.007161 8.003601 8.003959 7.999743 7.998906 8.005436 7.999052 7.998441\n#>  [513] 8.005993 7.993293 8.003979 7.998052 8.003446 8.005205 8.001393 7.999893\n#>  [521] 8.000953 7.996606 8.005237 7.996305 8.000838 8.001111 8.003825 8.002754\n#>  [529] 7.998011 7.989239 7.997925 8.007037 7.998936 8.000009 7.994437 8.004105\n#>  [537] 8.007518 7.999167 7.995423 8.006316 7.997561 7.992065 7.999412 8.002470\n#>  [545] 7.995935 8.004983 7.996990 7.999444 8.001819 8.002264 8.001794 7.999391\n#>  [553] 8.000711 8.003884 7.997222 8.002229 8.000140 7.997362 7.998121 8.003626\n#>  [561] 7.996828 7.998660 8.007201 7.990545 8.002540 7.998794 7.999419 7.999029\n#>  [569] 8.001154 8.000025 7.993838 8.008093 8.001481 7.996663 8.007296 7.998266\n#>  [577] 7.999407 7.998038 8.008479 7.999817 7.998130 7.994305 7.998410 7.992246\n#>  [585] 7.993715 8.000657 8.005475 8.000584 7.995733 7.994928 7.994475 7.996558\n#>  [593] 8.001231 7.990586 8.001811 8.006660 7.995780 8.003660 7.995874 8.007235\n#>  [601] 7.994679 8.002533 8.002715 8.000079 7.999960 8.000627 8.004912 7.995320\n#>  [609] 7.997751 7.997895 7.993893 8.011586 7.998566 8.008715 8.003321 7.999377\n#>  [617] 8.000802 7.998146 7.995369 7.999757 7.991953 8.007377 7.997896 7.992128\n#>  [625] 8.002493 8.002979 7.995980 7.998428 7.994872 8.005203 8.000585 8.001523\n#>  [633] 8.000762 8.001115 8.002555 7.996249 8.000170 8.001061 8.001522 8.001277\n#>  [641] 8.001464 7.997037 8.002029 7.998049 8.001097 7.996911 8.002380 7.996562\n#>  [649] 7.998095 7.998490 7.998100 7.995619 7.997002 7.993228 7.999767 8.004919\n#>  [657] 8.003017 7.998421 7.998732 8.002186 7.999531 7.991180 7.993012 8.005601\n#>  [665] 7.997420 8.006417 7.997825 8.000533 7.998116 7.997360 8.004760 8.000505\n#>  [673] 7.991517 8.006096 8.000369 8.006851 8.011097 7.999030 7.990455 8.001803\n#>  [681] 7.996471 7.995837 7.995097 8.000229 7.998364 7.996574 7.992865 8.000337\n#>  [689] 8.000821 8.001451 8.003181 7.995321 8.003019 7.991237 7.997993 7.999368\n#>  [697] 8.003484 8.002293 8.005698 7.994424 8.000121 8.000801 8.000068 8.002402\n#>  [705] 7.991637 7.999591 8.003164 8.001568 8.011240 7.994033 8.001044 7.996133\n#>  [713] 8.001053 8.004464 7.996339 7.999159 7.997851 8.009388 8.000932 8.006524\n#>  [721] 8.000838 8.000479 8.011372 7.995469 7.994235 8.001559 7.997278 7.998637\n#>  [729] 8.003335 8.005160 7.998504 8.001849 7.992966 7.996010 7.993741 7.999654\n#>  [737] 8.003993 8.003736 8.003565 7.997019 8.002626 7.992712 8.007141 8.001055\n#>  [745] 7.996299 7.993941 8.000595 7.995932 8.000620 8.007653 8.004204 8.006919\n#>  [753] 7.997279 7.998165 8.006442 7.994356 8.002415 8.001219 8.003147 8.001249\n#>  [761] 7.997763 7.999754 7.993474 7.998553 8.003973 7.999678 8.006342 7.990042\n#>  [769] 7.998669 7.999407 7.997005 8.000842 7.998851 7.995374 7.999751 8.001691\n#>  [777] 8.006344 7.997173 8.004340 7.993857 7.995617 8.002262 7.999556 7.993144\n#>  [785] 8.003737 8.002721 8.003587 7.994231 7.998736 8.003058 7.997087 7.997399\n#>  [793] 8.002429 7.996438 7.996323 7.997852 7.998482 7.999798 8.000900 7.999199\n#>  [801] 8.000144 7.999025 8.002350 7.998137 7.996218 7.995619 7.997099 8.007145\n#>  [809] 8.000075 8.001983 7.998753 7.996112 7.999887 7.997661 7.997274 7.998346\n#>  [817] 8.003147 8.002764 8.001259 7.997258 7.999192 7.997683 8.004842 7.996775\n#>  [825] 7.996230 7.994690 8.003857 7.994345 7.995559 8.001626 7.995951 7.998768\n#>  [833] 8.001693 7.999612 8.002599 8.004427 8.002658 8.008931 8.009864 7.990596\n#>  [841] 8.004723 8.003110 7.998342 7.996487 7.997431 7.999080 7.995766 7.999519\n#>  [849] 7.998037 8.003560 7.996975 8.003760 8.003659 7.997976 7.997207 7.995795\n#>  [857] 8.004901 8.000382 8.000203 8.000920 8.000846 7.999316 8.003118 7.998001\n#>  [865] 7.998041 8.001957 8.000022 7.994768 7.997769 8.005291 8.001781 7.994354\n#>  [873] 8.000753 8.001952 7.997760 7.995558 7.999893 7.993633 8.003756 7.996721\n#>  [881] 8.009949 7.995330 7.995431 8.004396 8.003024 8.001358 8.010050 8.003870\n#>  [889] 7.993226 8.001070 8.005873 8.005773 8.003108 8.008716 7.999191 8.006315\n#>  [897] 8.005208 7.995871 7.999438 8.000443 8.004826 7.995416 7.998256 8.001644\n#>  [905] 7.997544 7.999682 8.006318 8.003033 7.993182 7.997498 8.000904 8.005835\n#>  [913] 7.999243 8.006033 7.994683 7.999576 8.000475 7.998477 8.002698 8.006211\n#>  [921] 7.993163 7.998431 8.001354 8.004913 7.997176 8.002585 8.000478 8.003434\n#>  [929] 8.000675 7.997616 7.996238 8.003369 7.998997 8.008870 7.998067 7.994896\n#>  [937] 7.991412 8.000608 7.994211 7.999124 7.991011 7.994883 8.000810 7.998064\n#>  [945] 8.001366 8.007493 8.001882 7.999553 7.999759 8.004092 8.001982 7.998618\n#>  [953] 8.003408 7.993347 7.994667 8.001729 7.999095 7.996707 8.000973 8.004790\n#>  [961] 8.002313 7.994319 8.000346 7.990931 7.995729 8.001895 7.997764 8.001881\n#>  [969] 8.000603 8.000632 7.997167 8.001525 8.001522 8.004053 8.007079 8.001310\n#>  [977] 8.003859 8.006400 7.992571 8.000885 8.007437 7.995606 7.989178 7.993833\n#>  [985] 7.997134 8.000640 8.004944 7.999854 8.002762 7.999415 8.006468 7.996520\n#>  [993] 7.991614 7.996547 7.998939 8.005995 7.996379 8.002120 7.998497 7.997043\n```\n\n\n:::\n:::\n\n\n## Distributions of $\\hat \\beta_1$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data.frame(x = betas), aes(x = x)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n# Central Limit Theorem\n\n## Central Limit Theorem\n\nThe Central Limit Theorem (CLT) is a fundamental concept in probability and statistics. It states that the distribution of the sum (or average) of a large number of independent, identically distributed (i.i.d.) random variables will be approximately normal, regardless of the underlying distribution of those individual variables.\n\n\n## Formal Statement of the CLT\n\n- Let $X_1$, $X_2$, ..., $X_n$ be a sequence of i.i.d. random variables with mean $\\mu$ and standard deviation $\\sigma$.\n- Let $\\bar X$ be the sample mean of these variables.\n- As n (the sample size) approaches infinity, the distribution of $\\bar X$ approaches a normal distribution with:\n    - Mean: $\\mu$\n    - Standard Deviation: $\\sigma/\\sqrt{n}$\n\n## CLT Example\n\n- **Imagine:** You're flipping a fair coin many times. \n    - Each flip is an independent event (heads or tails).\n    - The probability of heads/tails is the same for each flip.\n- **Now:** Calculate the average number of heads after each set of 10 flips, then each set of 100 flips, and so on.\n- **Observation:** As the number of flips in each set increases, the distribution of these averages will start to resemble a bell-shaped curve (normal distribution), even though the individual coin flips are not normally distributed.\n\n## CLT Implications\n\n- **Approximation:** Even if the underlying data is not normally distributed, the distribution of the sample means will be approximately normal for large enough sample sizes.\n- **Practical Rule:** A common rule of thumb is that the sample size (n) should be at least 30 for the CLT to provide a good approximation. However, this is a guideline, and the actual required sample size can vary depending on the shape of the original distribution.\n\n## Normal Example $n = 10$\n\nSimulating 500 samples of size 10 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#rnorm(10, 5, 2)\nsims <- replicate(500, rnorm(10, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(10)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n## Normal Example $n = 30$\n\nSimulating 500 samples of size 30 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(30, 5, 2)\nsims <- replicate(500, rnorm(30, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(30)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 50$\n\nSimulating 500 samples of size 50 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(50, 5, 2)\nsims <- replicate(500, rnorm(50, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(50)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n## Normal Example $n = 100$\n\nSimulating 500 samples of size 100 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(100, 5, 2)\nsims <- replicate(500, rnorm(100, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(100)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n# Common Sampling Distributions\n\n## Normal DGP\n\nWhen the data is said to have a normal distribution (DGP), there are special properties with both the mean and standard deviation, regardless of sample size.\n\n## Statistics\n\n::: {.columns}\n::: {.column}\n**Mean**\n$$\n\\bar X = \\sum ^n_{i=1} X_i\n$$\n:::\n::: {.column}\n**Standard Deviation**\n$$\ns^2 = \\frac{1}{n}\\sum ^n_{i=1} (X_i - \\bar X)^2\n$$\n\n:::\n:::\n\n\n## When the true $\\mu$ and $\\sigma$ are known\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $\\bar X$\n\n$$\n\\bar X \\sim N(\\mu, \\sigma/\\sqrt{n})\n$$\n\n## Distribution of Z\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\sim N(0,1)\n$$\n\n## When the true $\\mu$ and $\\sigma$ are unknown\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $s^2$ (unknown $\\mu$)\n$$\n(n-1)s^2/\\sigma^2 \\sim \\chi^2(n-1)\n$$\n\n## Distribution of Z (unknown $\\sigma$)\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\rightarrow \\frac{\\bar X - \\mu}{s/\\sqrt{n}} \\sim t(n-1)\n$$\n\n\n\n# Sampling Distributions for Regression Models\n\n\n## Regression Coefficients\n\nThe estimates of regression coefficients (slopes) have a distribution!\n\n::: fragment\n\nBased on our outcome, we will have 2 different distributions to work with: Normal or t.\n\n:::\n\n## Linear Regression\n\n$$\n\\frac{\\hat\\beta_j-\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## Logistic Regression\n\n$$\n\\frac{\\hat\\beta_j - \\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n",
    "supporting": [
      "9_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}